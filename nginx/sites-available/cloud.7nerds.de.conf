## Choose between www and non-www, listen on the *wrong* one and redirect to
## the right one -- http://wiki.nginx.org/Pitfalls#Server_Name

server {

  include includes/listen_http.conf;

  ## listen on both hosts
  server_name cloud.7nerds.de www.cloud.7nerds.de;

  ## and redirect to the https host (declared below)
  ## avoiding http://www -> https://www -> https:// chain.
  #return 301 https://cloud.7nerds.de$request_uri;

  ## Only if there is no ssl certificate yet
  root /srv/http/cloud/cloud.7nerds.de;
}

server {

  include includes/listen_http2.conf;

  ## listen on the wrong host
  server_name www.cloud.7nerds.de;

  ## certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
  #ssl_certificate /etc/ssl/private/www.cloud.7nerds.de/fullchain.pem;
  #ssl_certificate_key /etc/ssl/private/www.cloud.7nerds.de/www.cloud.7nerds.de.key.pem;

  ## verify chain of trust of OCSP response using Root CA and Intermediate certs
  #ssl_trusted_certificate /etc/ssl/private/www.cloud.7nerds.de/fullchain.pem;

  include includes/location/protected_system_files.conf;
  include includes/ssl.conf;

  ## and redirect to the non-www host (declared below)
  return 301 https://cloud.7nerds.de$request_uri;
}

server {

    include includes/listen_http2.conf;

    server_name cloud.7nerds.de;

    access_log /var/log/nginx/cloud-7nerds-de-access.log;
    error_log /var/log/nginx/cloud-7nerds-de-erros.log;

    ## Specify a charset
    charset utf-8;

    ## certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    #ssl_certificate /etc/ssl/private/cloud.7nerds.de/fullchain.pem;
    #ssl_certificate_key /etc/ssl/private/cloud.7nerds.de/cloud.7nerds.de.key.pem;

    ## verify chain of trust of OCSP response using Root CA and Intermediate certs
    #ssl_trusted_certificate /etc/ssl/private/cloud.7nerds.de/fullchain.pem;

    include includes/location/static.conf;

    proxy_set_header X-Forwarded-For $remote_addr;


    location / {
      proxy_pass  http://127.0.0.1:8000;
       ### force timeouts if one of backend is dead ##
      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
      #proxy_set_header Accept-Encoding   "";

      #proxy_set_header Host $http_host;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header   X-Forwarded-Host $server_name;
      proxy_set_header X-Forwarded-Proto $scheme;

      # proxy_set_header X-Forwarded-Proto https;

      ### By default we don't want to redirect it ####
      proxy_redirect off;

      client_max_body_size 0;
      client_body_buffer_size 1m;
      proxy_intercept_errors on;
      proxy_read_timeout 1200s;
    }

    location /seafhttp{
      rewrite ^/seafhttp(.*)$ $1 break;
      proxy_pass http://127.0.0.1:8082;
      client_max_body_size 0;
 
      proxy_connect_timeout  36000s;
      proxy_read_timeout  36000s;
      proxy_send_timeout  36000s;
      proxy_request_buffering off;
      send_timeout  36000s;
      
    }

    location /media {
        root /srv/http/cloud/cloud.7nerds.de/seafile-server-latest/seahub;
    }

    include includes/ssl.conf;
    include includes/location/protected_system_files.conf;
    include includes/resolver.conf;
}
