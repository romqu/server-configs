# The key to use when saving cache files, which will run through the MD5 hashing algorithm.
# Remember to replace $cookie_PHPSESSID with a proper variable name, if you use custom session name: session.name/session_name()
fastcgi_cache_key $request_method|$http_if_modified_since|$http_if_none_match|$host|$request_uri#|$cookie_PHPSESSID;
fastcgi_cache_lock on;

fastcgi_cache_lock_timeout 3s;
fastcgi_cache_methods GET HEAD;

# If an error occurs when communicating with FastCGI server, return cached content.
# Useful for serving cached content if the PHP process dies or timeouts.
fastcgi_cache_use_stale updating error timeout invalid_header http_500;
fastcgi_cache_valid 404 1m;

# fastcgi_ignore_headers below may cause caching of authorized user content
# Comment it out to cache only anonymous generated pages
# https://github.com/Umkus/nginx-boilerplate/issues/39
#fastcgi_ignore_headers          "Cache-Control" "Expires";
if_modified_since before;
fastcgi_cache_valid 200 301 302 304 1h;
fastcgi_cache_min_uses 3;

# Allow caching of requests which contain the following headers.
fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

# Show the cache status in server responses.
add_header X-FastCGI-Cache $upstream_cache_status;

# Don't skip by default
set $skip_cache 0;

# POST requests and urls with a query string should always go to PHP
if ($request_method = POST) {

  set $skip_cache 1;
}

if ($query_string != "") {

  set $skip_cache 1;
}

# Don't cache uris containing the following segments
if ($request_uri ~* "/wp-admin/|/wp-json/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {

  set $skip_cache 1;
}

# Don't use the cache for logged in users or recent commenters
if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {

  set $skip_cache 1;
}
